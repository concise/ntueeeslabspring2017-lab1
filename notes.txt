2017/03/03 Fri 14:20

             March 2017
        Su Mo Tu We Th Fr Sa
                  1  2  3  4
         5  6  7  8  9 10 11
        12 13 14 15 16 17 18
        19 20 21 22 23 24 25
        26 27 28 29 30 31

------------------------------------------------------------------------------

1. Friday 14:20-17:20 @MD303 (if announced)
2. https://www.facebook.com/groups/1132256960218865/

------------------------------------------------------------------------------

I make mistakes

Don't bindly trust all the information you hear from me / from the internet

If you have any question, just ask

------------------------------------------------------------------------------

the name of our lab 1 is

    JavaScript and web programming basics

at least three ideas

    you are going to do "JavaScript" programming
    you are going to do "web" programming
    but you will only get "basics" of them from me

------------------------------------------------------------------------------

Learning...

No matter what programming languages you choose, you can do > 99% of what you
want to do achieve by getting a small subset of the languages

------------------------------------------------------------------------------

- Many misunderstandings about JavaScript

    - Poor name

    - Historically (before 2010) most people only took class on languages like
      C++/Java/...  People don't take JavaScript seriously.  They just search
      on the web, finding bad tutorials, learning from bad examples,
      copying-pasting bad code

    - Now a powerful and concise language (too powerful for its original
      purpose actually) and we have better community

    - Inconsistency between implementations (different web browser vendors)

        - languages vs implementations: C++98/C++03/C++11/C++14/C++17 vs
          GCC ver. X / CLANG ver. Y /...
        - ECMAScript versions: 5.1(2011) / 6(2015) / 7(2016)
        - some features supported by A might not be supported by B

- Values and types

    - there are only two types of value

        1. primitive values

            - undefined
            - null
            - true / false
            - 0 / 1 / 2 / 3.14 / -Infinity / NaN (binary64)
            - "Hello world" / "中文字" (ascii, unicode, utf8, utf16...)

            - many ways to represent the same value

        2. objects

            - objects are collection of properties (key-value pairs with some
              additional attributes)
            - functions are just callable objects
            - literal notation: object initializers



- Variables

    - two views

        1. variables are just name bindings of values (like a "tag")

            some value are (objects) are immutable, some are mutable
            (here we talk about mutability of the content, the referenced
            information)

        2. variables are just containers that hold primitive values or object
           references (addresses)


    - only have function scoped or global variables (we don't have let/const
      binding until ES6) (but it's actually ok...)



- Dealing with functions

    - function expressions
    - variable lifetime
    - we don't need function declaration statements
    - arguments
    - return value
    - variable(identifier) resolution and scope chain
    - higher order functions and closures

    - constructor
    - this value
    - apply() and call()



- Many programming paradigms can be adapted

    - functional (programming with mathematical functions in mind)
    - event-driven
    - object-oriented
    - imperative vs declarative

        let a = [3, 4, 5];

        for (let i = 0; i < a.length; i++) {
            console.log(a[i]);
        }

        for (let n of a) {
            console.log(n);
        }

        a.forEach(function(n){ console.log(n); });

        a.forEach(n => { console.log(n); });

        a.forEach(console.log);

        a.map(n => n * n);



- Prototype-based inheritance

    - property and prototype chain



- Don't get into the traps

    - Automatic semicolon insertion
    - When you forget variable declaration... it gets into the global scope
      (into "the global object")
    - You don't need == and !=



------------------------------------------------------------------------------



https://gist.github.com/concise/f946e5be58b9d90ba7281e2e2b2128ba

By the way there is no "setTimeout" in ECMAScript language specification...

------------------------------------------------------------------------------

How does a web browser work?
How does a web application work?

file://...
http://...
https://...

Where is the "JavaScript" part in a web browser?

HTML
CSS

------------------------------------------------------------------------------

Let's do something beyond hello world...  What do you want to do?

I only have some boring examples...
    1. base64 encoder decoder
    2. open a file and print the content to stdout
    3. create a trivial webserver
    4. get a list of facebook url of members in our facebook group
    5. mess around with a web page
    6. ...

------------------------------------------------------------------------------

software engineering is about maintaining complexity

    - composition is a way that is easy to reason about
    - build a larger system from smaller components
    - hide unnecessary details
    - work at higher level of abstractions
    - refactor the interfaces, refactor your code
    - commenting code is like explaining joke, just write code that is easy to
      understand
    - question yourself: how does your system work? how does your code work?
